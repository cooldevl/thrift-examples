/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.asksunny.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JsonRpcService {

  public interface Iface {

    public String invoke(RpcCommand rpcCommand) throws RPCException, org.apache.thrift.TException;

    public String invokeWithArgs(RpcCommand rpcCommand, List<String> rawArgs) throws RPCException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void invoke(RpcCommand rpcCommand, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.invoke_call> resultHandler) throws org.apache.thrift.TException;

    public void invokeWithArgs(RpcCommand rpcCommand, List<String> rawArgs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.invokeWithArgs_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String invoke(RpcCommand rpcCommand) throws RPCException, org.apache.thrift.TException
    {
      send_invoke(rpcCommand);
      return recv_invoke();
    }

    public void send_invoke(RpcCommand rpcCommand) throws org.apache.thrift.TException
    {
      invoke_args args = new invoke_args();
      args.setRpcCommand(rpcCommand);
      sendBase("invoke", args);
    }

    public String recv_invoke() throws RPCException, org.apache.thrift.TException
    {
      invoke_result result = new invoke_result();
      receiveBase(result, "invoke");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rex != null) {
        throw result.rex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "invoke failed: unknown result");
    }

    public String invokeWithArgs(RpcCommand rpcCommand, List<String> rawArgs) throws RPCException, org.apache.thrift.TException
    {
      send_invokeWithArgs(rpcCommand, rawArgs);
      return recv_invokeWithArgs();
    }

    public void send_invokeWithArgs(RpcCommand rpcCommand, List<String> rawArgs) throws org.apache.thrift.TException
    {
      invokeWithArgs_args args = new invokeWithArgs_args();
      args.setRpcCommand(rpcCommand);
      args.setRawArgs(rawArgs);
      sendBase("invokeWithArgs", args);
    }

    public String recv_invokeWithArgs() throws RPCException, org.apache.thrift.TException
    {
      invokeWithArgs_result result = new invokeWithArgs_result();
      receiveBase(result, "invokeWithArgs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rex != null) {
        throw result.rex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "invokeWithArgs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void invoke(RpcCommand rpcCommand, org.apache.thrift.async.AsyncMethodCallback<invoke_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      invoke_call method_call = new invoke_call(rpcCommand, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class invoke_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RpcCommand rpcCommand;
      public invoke_call(RpcCommand rpcCommand, org.apache.thrift.async.AsyncMethodCallback<invoke_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rpcCommand = rpcCommand;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("invoke", org.apache.thrift.protocol.TMessageType.CALL, 0));
        invoke_args args = new invoke_args();
        args.setRpcCommand(rpcCommand);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_invoke();
      }
    }

    public void invokeWithArgs(RpcCommand rpcCommand, List<String> rawArgs, org.apache.thrift.async.AsyncMethodCallback<invokeWithArgs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      invokeWithArgs_call method_call = new invokeWithArgs_call(rpcCommand, rawArgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class invokeWithArgs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RpcCommand rpcCommand;
      private List<String> rawArgs;
      public invokeWithArgs_call(RpcCommand rpcCommand, List<String> rawArgs, org.apache.thrift.async.AsyncMethodCallback<invokeWithArgs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rpcCommand = rpcCommand;
        this.rawArgs = rawArgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("invokeWithArgs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        invokeWithArgs_args args = new invokeWithArgs_args();
        args.setRpcCommand(rpcCommand);
        args.setRawArgs(rawArgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_invokeWithArgs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("invoke", new invoke());
      processMap.put("invokeWithArgs", new invokeWithArgs());
      return processMap;
    }

    public static class invoke<I extends Iface> extends org.apache.thrift.ProcessFunction<I, invoke_args> {
      public invoke() {
        super("invoke");
      }

      public invoke_args getEmptyArgsInstance() {
        return new invoke_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public invoke_result getResult(I iface, invoke_args args) throws org.apache.thrift.TException {
        invoke_result result = new invoke_result();
        try {
          result.success = iface.invoke(args.rpcCommand);
        } catch (RPCException rex) {
          result.rex = rex;
        }
        return result;
      }
    }

    public static class invokeWithArgs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, invokeWithArgs_args> {
      public invokeWithArgs() {
        super("invokeWithArgs");
      }

      public invokeWithArgs_args getEmptyArgsInstance() {
        return new invokeWithArgs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public invokeWithArgs_result getResult(I iface, invokeWithArgs_args args) throws org.apache.thrift.TException {
        invokeWithArgs_result result = new invokeWithArgs_result();
        try {
          result.success = iface.invokeWithArgs(args.rpcCommand, args.rawArgs);
        } catch (RPCException rex) {
          result.rex = rex;
        }
        return result;
      }
    }

  }

  public static class invoke_args implements org.apache.thrift.TBase<invoke_args, invoke_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invoke_args");

    private static final org.apache.thrift.protocol.TField RPC_COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcCommand", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new invoke_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new invoke_argsTupleSchemeFactory());
    }

    public RpcCommand rpcCommand; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RPC_COMMAND((short)1, "rpcCommand");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RPC_COMMAND
            return RPC_COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RPC_COMMAND, new org.apache.thrift.meta_data.FieldMetaData("rpcCommand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RpcCommand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invoke_args.class, metaDataMap);
    }

    public invoke_args() {
    }

    public invoke_args(
      RpcCommand rpcCommand)
    {
      this();
      this.rpcCommand = rpcCommand;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invoke_args(invoke_args other) {
      if (other.isSetRpcCommand()) {
        this.rpcCommand = new RpcCommand(other.rpcCommand);
      }
    }

    public invoke_args deepCopy() {
      return new invoke_args(this);
    }

   
    public void clear() {
      this.rpcCommand = null;
    }

    public RpcCommand getRpcCommand() {
      return this.rpcCommand;
    }

    public invoke_args setRpcCommand(RpcCommand rpcCommand) {
      this.rpcCommand = rpcCommand;
      return this;
    }

    public void unsetRpcCommand() {
      this.rpcCommand = null;
    }

    /** Returns true if field rpcCommand is set (has been assigned a value) and false otherwise */
    public boolean isSetRpcCommand() {
      return this.rpcCommand != null;
    }

    public void setRpcCommandIsSet(boolean value) {
      if (!value) {
        this.rpcCommand = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RPC_COMMAND:
        if (value == null) {
          unsetRpcCommand();
        } else {
          setRpcCommand((RpcCommand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RPC_COMMAND:
        return getRpcCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RPC_COMMAND:
        return isSetRpcCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invoke_args)
        return this.equals((invoke_args)that);
      return false;
    }

    public boolean equals(invoke_args that) {
      if (that == null)
        return false;

      boolean this_present_rpcCommand = true && this.isSetRpcCommand();
      boolean that_present_rpcCommand = true && that.isSetRpcCommand();
      if (this_present_rpcCommand || that_present_rpcCommand) {
        if (!(this_present_rpcCommand && that_present_rpcCommand))
          return false;
        if (!this.rpcCommand.equals(that.rpcCommand))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(invoke_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      invoke_args typedOther = (invoke_args)other;

      lastComparison = Boolean.valueOf(isSetRpcCommand()).compareTo(typedOther.isSetRpcCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRpcCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcCommand, typedOther.rpcCommand);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("invoke_args(");
      boolean first = true;

      sb.append("rpcCommand:");
      if (this.rpcCommand == null) {
        sb.append("null");
      } else {
        sb.append(this.rpcCommand);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rpcCommand != null) {
        rpcCommand.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invoke_argsStandardSchemeFactory implements SchemeFactory {
      public invoke_argsStandardScheme getScheme() {
        return new invoke_argsStandardScheme();
      }
    }

    private static class invoke_argsStandardScheme extends StandardScheme<invoke_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invoke_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RPC_COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rpcCommand = new RpcCommand();
                struct.rpcCommand.read(iprot);
                struct.setRpcCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invoke_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rpcCommand != null) {
          oprot.writeFieldBegin(RPC_COMMAND_FIELD_DESC);
          struct.rpcCommand.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invoke_argsTupleSchemeFactory implements SchemeFactory {
      public invoke_argsTupleScheme getScheme() {
        return new invoke_argsTupleScheme();
      }
    }

    private static class invoke_argsTupleScheme extends TupleScheme<invoke_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, invoke_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRpcCommand()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRpcCommand()) {
          struct.rpcCommand.write(oprot);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, invoke_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rpcCommand = new RpcCommand();
          struct.rpcCommand.read(iprot);
          struct.setRpcCommandIsSet(true);
        }
      }
    }

  }

  public static class invoke_result implements org.apache.thrift.TBase<invoke_result, invoke_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invoke_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField REX_FIELD_DESC = new org.apache.thrift.protocol.TField("rex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new invoke_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new invoke_resultTupleSchemeFactory());
    }

    public String success; // required
    public RPCException rex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      REX((short)1, "rex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // REX
            return REX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REX, new org.apache.thrift.meta_data.FieldMetaData("rex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invoke_result.class, metaDataMap);
    }

    public invoke_result() {
    }

    public invoke_result(
      String success,
      RPCException rex)
    {
      this();
      this.success = success;
      this.rex = rex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invoke_result(invoke_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetRex()) {
        this.rex = new RPCException(other.rex);
      }
    }

    public invoke_result deepCopy() {
      return new invoke_result(this);
    }

    
    public void clear() {
      this.success = null;
      this.rex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public invoke_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RPCException getRex() {
      return this.rex;
    }

    public invoke_result setRex(RPCException rex) {
      this.rex = rex;
      return this;
    }

    public void unsetRex() {
      this.rex = null;
    }

    /** Returns true if field rex is set (has been assigned a value) and false otherwise */
    public boolean isSetRex() {
      return this.rex != null;
    }

    public void setRexIsSet(boolean value) {
      if (!value) {
        this.rex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case REX:
        if (value == null) {
          unsetRex();
        } else {
          setRex((RPCException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case REX:
        return getRex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case REX:
        return isSetRex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invoke_result)
        return this.equals((invoke_result)that);
      return false;
    }

    public boolean equals(invoke_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rex = true && this.isSetRex();
      boolean that_present_rex = true && that.isSetRex();
      if (this_present_rex || that_present_rex) {
        if (!(this_present_rex && that_present_rex))
          return false;
        if (!this.rex.equals(that.rex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(invoke_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      invoke_result typedOther = (invoke_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRex()).compareTo(typedOther.isSetRex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rex, typedOther.rex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("invoke_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rex:");
      if (this.rex == null) {
        sb.append("null");
      } else {
        sb.append(this.rex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invoke_resultStandardSchemeFactory implements SchemeFactory {
      public invoke_resultStandardScheme getScheme() {
        return new invoke_resultStandardScheme();
      }
    }

    private static class invoke_resultStandardScheme extends StandardScheme<invoke_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invoke_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // REX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rex = new RPCException();
                struct.rex.read(iprot);
                struct.setRexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invoke_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.rex != null) {
          oprot.writeFieldBegin(REX_FIELD_DESC);
          struct.rex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invoke_resultTupleSchemeFactory implements SchemeFactory {
      public invoke_resultTupleScheme getScheme() {
        return new invoke_resultTupleScheme();
      }
    }

    private static class invoke_resultTupleScheme extends TupleScheme<invoke_result> {

      public void write(org.apache.thrift.protocol.TProtocol prot, invoke_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetRex()) {
          struct.rex.write(oprot);
        }
      }

      public void read(org.apache.thrift.protocol.TProtocol prot, invoke_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rex = new RPCException();
          struct.rex.read(iprot);
          struct.setRexIsSet(true);
        }
      }
    }

  }

  public static class invokeWithArgs_args implements org.apache.thrift.TBase<invokeWithArgs_args, invokeWithArgs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invokeWithArgs_args");

    private static final org.apache.thrift.protocol.TField RPC_COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcCommand", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RAW_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("rawArgs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new invokeWithArgs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new invokeWithArgs_argsTupleSchemeFactory());
    }

    public RpcCommand rpcCommand; // required
    public List<String> rawArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RPC_COMMAND((short)1, "rpcCommand"),
      RAW_ARGS((short)2, "rawArgs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RPC_COMMAND
            return RPC_COMMAND;
          case 2: // RAW_ARGS
            return RAW_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RPC_COMMAND, new org.apache.thrift.meta_data.FieldMetaData("rpcCommand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RpcCommand.class)));
      tmpMap.put(_Fields.RAW_ARGS, new org.apache.thrift.meta_data.FieldMetaData("rawArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "RAWData")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invokeWithArgs_args.class, metaDataMap);
    }

    public invokeWithArgs_args() {
    }

    public invokeWithArgs_args(
      RpcCommand rpcCommand,
      List<String> rawArgs)
    {
      this();
      this.rpcCommand = rpcCommand;
      this.rawArgs = rawArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invokeWithArgs_args(invokeWithArgs_args other) {
      if (other.isSetRpcCommand()) {
        this.rpcCommand = new RpcCommand(other.rpcCommand);
      }
      if (other.isSetRawArgs()) {
        this.rawArgs = other.rawArgs;
      }
    }

    public invokeWithArgs_args deepCopy() {
      return new invokeWithArgs_args(this);
    }

    public void clear() {
      this.rpcCommand = null;
      this.rawArgs = null;
    }

    public RpcCommand getRpcCommand() {
      return this.rpcCommand;
    }

    public invokeWithArgs_args setRpcCommand(RpcCommand rpcCommand) {
      this.rpcCommand = rpcCommand;
      return this;
    }

    public void unsetRpcCommand() {
      this.rpcCommand = null;
    }

    /** Returns true if field rpcCommand is set (has been assigned a value) and false otherwise */
    public boolean isSetRpcCommand() {
      return this.rpcCommand != null;
    }

    public void setRpcCommandIsSet(boolean value) {
      if (!value) {
        this.rpcCommand = null;
      }
    }

    public int getRawArgsSize() {
      return (this.rawArgs == null) ? 0 : this.rawArgs.size();
    }

    public java.util.Iterator<String> getRawArgsIterator() {
      return (this.rawArgs == null) ? null : this.rawArgs.iterator();
    }

    public void addToRawArgs(String elem) {
      if (this.rawArgs == null) {
        this.rawArgs = new ArrayList<String>();
      }
      this.rawArgs.add(elem);
    }

    public List<String> getRawArgs() {
      return this.rawArgs;
    }

    public invokeWithArgs_args setRawArgs(List<String> rawArgs) {
      this.rawArgs = rawArgs;
      return this;
    }

    public void unsetRawArgs() {
      this.rawArgs = null;
    }

    /** Returns true if field rawArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetRawArgs() {
      return this.rawArgs != null;
    }

    public void setRawArgsIsSet(boolean value) {
      if (!value) {
        this.rawArgs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RPC_COMMAND:
        if (value == null) {
          unsetRpcCommand();
        } else {
          setRpcCommand((RpcCommand)value);
        }
        break;

      case RAW_ARGS:
        if (value == null) {
          unsetRawArgs();
        } else {
          setRawArgs((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RPC_COMMAND:
        return getRpcCommand();

      case RAW_ARGS:
        return getRawArgs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RPC_COMMAND:
        return isSetRpcCommand();
      case RAW_ARGS:
        return isSetRawArgs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invokeWithArgs_args)
        return this.equals((invokeWithArgs_args)that);
      return false;
    }

    public boolean equals(invokeWithArgs_args that) {
      if (that == null)
        return false;

      boolean this_present_rpcCommand = true && this.isSetRpcCommand();
      boolean that_present_rpcCommand = true && that.isSetRpcCommand();
      if (this_present_rpcCommand || that_present_rpcCommand) {
        if (!(this_present_rpcCommand && that_present_rpcCommand))
          return false;
        if (!this.rpcCommand.equals(that.rpcCommand))
          return false;
      }

      boolean this_present_rawArgs = true && this.isSetRawArgs();
      boolean that_present_rawArgs = true && that.isSetRawArgs();
      if (this_present_rawArgs || that_present_rawArgs) {
        if (!(this_present_rawArgs && that_present_rawArgs))
          return false;
        if (!this.rawArgs.equals(that.rawArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(invokeWithArgs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      invokeWithArgs_args typedOther = (invokeWithArgs_args)other;

      lastComparison = Boolean.valueOf(isSetRpcCommand()).compareTo(typedOther.isSetRpcCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRpcCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcCommand, typedOther.rpcCommand);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRawArgs()).compareTo(typedOther.isSetRawArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRawArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawArgs, typedOther.rawArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("invokeWithArgs_args(");
      boolean first = true;

      sb.append("rpcCommand:");
      if (this.rpcCommand == null) {
        sb.append("null");
      } else {
        sb.append(this.rpcCommand);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rawArgs:");
      if (this.rawArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.rawArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rpcCommand != null) {
        rpcCommand.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invokeWithArgs_argsStandardSchemeFactory implements SchemeFactory {
      public invokeWithArgs_argsStandardScheme getScheme() {
        return new invokeWithArgs_argsStandardScheme();
      }
    }

    private static class invokeWithArgs_argsStandardScheme extends StandardScheme<invokeWithArgs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invokeWithArgs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RPC_COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rpcCommand = new RpcCommand();
                struct.rpcCommand.read(iprot);
                struct.setRpcCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RAW_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.rawArgs = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.rawArgs.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setRawArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invokeWithArgs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rpcCommand != null) {
          oprot.writeFieldBegin(RPC_COMMAND_FIELD_DESC);
          struct.rpcCommand.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rawArgs != null) {
          oprot.writeFieldBegin(RAW_ARGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rawArgs.size()));
            for (String _iter3 : struct.rawArgs)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invokeWithArgs_argsTupleSchemeFactory implements SchemeFactory {
      public invokeWithArgs_argsTupleScheme getScheme() {
        return new invokeWithArgs_argsTupleScheme();
      }
    }

    private static class invokeWithArgs_argsTupleScheme extends TupleScheme<invokeWithArgs_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, invokeWithArgs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRpcCommand()) {
          optionals.set(0);
        }
        if (struct.isSetRawArgs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRpcCommand()) {
          struct.rpcCommand.write(oprot);
        }
        if (struct.isSetRawArgs()) {
          {
            oprot.writeI32(struct.rawArgs.size());
            for (String _iter4 : struct.rawArgs)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, invokeWithArgs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rpcCommand = new RpcCommand();
          struct.rpcCommand.read(iprot);
          struct.setRpcCommandIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.rawArgs = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.rawArgs.add(_elem7);
            }
          }
          struct.setRawArgsIsSet(true);
        }
      }
    }

  }

  public static class invokeWithArgs_result implements org.apache.thrift.TBase<invokeWithArgs_result, invokeWithArgs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invokeWithArgs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField REX_FIELD_DESC = new org.apache.thrift.protocol.TField("rex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new invokeWithArgs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new invokeWithArgs_resultTupleSchemeFactory());
    }

    public String success; // required
    public RPCException rex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      REX((short)1, "rex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // REX
            return REX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REX, new org.apache.thrift.meta_data.FieldMetaData("rex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invokeWithArgs_result.class, metaDataMap);
    }

    public invokeWithArgs_result() {
    }

    public invokeWithArgs_result(
      String success,
      RPCException rex)
    {
      this();
      this.success = success;
      this.rex = rex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invokeWithArgs_result(invokeWithArgs_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetRex()) {
        this.rex = new RPCException(other.rex);
      }
    }

    public invokeWithArgs_result deepCopy() {
      return new invokeWithArgs_result(this);
    }

    
    public void clear() {
      this.success = null;
      this.rex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public invokeWithArgs_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RPCException getRex() {
      return this.rex;
    }

    public invokeWithArgs_result setRex(RPCException rex) {
      this.rex = rex;
      return this;
    }

    public void unsetRex() {
      this.rex = null;
    }

    /** Returns true if field rex is set (has been assigned a value) and false otherwise */
    public boolean isSetRex() {
      return this.rex != null;
    }

    public void setRexIsSet(boolean value) {
      if (!value) {
        this.rex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case REX:
        if (value == null) {
          unsetRex();
        } else {
          setRex((RPCException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case REX:
        return getRex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case REX:
        return isSetRex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invokeWithArgs_result)
        return this.equals((invokeWithArgs_result)that);
      return false;
    }

    public boolean equals(invokeWithArgs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rex = true && this.isSetRex();
      boolean that_present_rex = true && that.isSetRex();
      if (this_present_rex || that_present_rex) {
        if (!(this_present_rex && that_present_rex))
          return false;
        if (!this.rex.equals(that.rex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(invokeWithArgs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      invokeWithArgs_result typedOther = (invokeWithArgs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRex()).compareTo(typedOther.isSetRex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rex, typedOther.rex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("invokeWithArgs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rex:");
      if (this.rex == null) {
        sb.append("null");
      } else {
        sb.append(this.rex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invokeWithArgs_resultStandardSchemeFactory implements SchemeFactory {
      public invokeWithArgs_resultStandardScheme getScheme() {
        return new invokeWithArgs_resultStandardScheme();
      }
    }

    private static class invokeWithArgs_resultStandardScheme extends StandardScheme<invokeWithArgs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invokeWithArgs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // REX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rex = new RPCException();
                struct.rex.read(iprot);
                struct.setRexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invokeWithArgs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.rex != null) {
          oprot.writeFieldBegin(REX_FIELD_DESC);
          struct.rex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invokeWithArgs_resultTupleSchemeFactory implements SchemeFactory {
      public invokeWithArgs_resultTupleScheme getScheme() {
        return new invokeWithArgs_resultTupleScheme();
      }
    }

    private static class invokeWithArgs_resultTupleScheme extends TupleScheme<invokeWithArgs_result> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, invokeWithArgs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetRex()) {
          struct.rex.write(oprot);
        }
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, invokeWithArgs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rex = new RPCException();
          struct.rex.read(iprot);
          struct.setRexIsSet(true);
        }
      }
    }

  }

}
