/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.asksunny.rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RpcCommand implements org.apache.thrift.TBase<RpcCommand, RpcCommand._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcCommand");

  private static final org.apache.thrift.protocol.TField JSON_COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonCommand", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RPC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CREDENTIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("credential", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("clientAddress", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RpcCommandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RpcCommandTupleSchemeFactory());
  }

  public String jsonCommand; // required
  /**
   * 
   * @see RpcType
   */
  public RpcType rpcType; // required
  public long timestamp; // required
  public String credential; // optional
  public String clientId; // optional
  public String clientAddress; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JSON_COMMAND((short)1, "jsonCommand"),
    /**
     * 
     * @see RpcType
     */
    RPC_TYPE((short)2, "rpcType"),
    TIMESTAMP((short)3, "timestamp"),
    CREDENTIAL((short)4, "credential"),
    CLIENT_ID((short)5, "clientId"),
    CLIENT_ADDRESS((short)6, "clientAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JSON_COMMAND
          return JSON_COMMAND;
        case 2: // RPC_TYPE
          return RPC_TYPE;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // CREDENTIAL
          return CREDENTIAL;
        case 5: // CLIENT_ID
          return CLIENT_ID;
        case 6: // CLIENT_ADDRESS
          return CLIENT_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CREDENTIAL,_Fields.CLIENT_ID,_Fields.CLIENT_ADDRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JSON_COMMAND, new org.apache.thrift.meta_data.FieldMetaData("jsonCommand", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rpcType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RpcType.class)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREDENTIAL, new org.apache.thrift.meta_data.FieldMetaData("credential", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("clientAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcCommand.class, metaDataMap);
  }

  public RpcCommand() {
  }

  public RpcCommand(
    String jsonCommand,
    RpcType rpcType,
    long timestamp)
  {
    this();
    this.jsonCommand = jsonCommand;
    this.rpcType = rpcType;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcCommand(RpcCommand other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJsonCommand()) {
      this.jsonCommand = other.jsonCommand;
    }
    if (other.isSetRpcType()) {
      this.rpcType = other.rpcType;
    }
    this.timestamp = other.timestamp;
    if (other.isSetCredential()) {
      this.credential = other.credential;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetClientAddress()) {
      this.clientAddress = other.clientAddress;
    }
  }

  public RpcCommand deepCopy() {
    return new RpcCommand(this);
  }

  
  public void clear() {
    this.jsonCommand = null;
    this.rpcType = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.credential = null;
    this.clientId = null;
    this.clientAddress = null;
  }

  public String getJsonCommand() {
    return this.jsonCommand;
  }

  public RpcCommand setJsonCommand(String jsonCommand) {
    this.jsonCommand = jsonCommand;
    return this;
  }

  public void unsetJsonCommand() {
    this.jsonCommand = null;
  }

  /** Returns true if field jsonCommand is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonCommand() {
    return this.jsonCommand != null;
  }

  public void setJsonCommandIsSet(boolean value) {
    if (!value) {
      this.jsonCommand = null;
    }
  }

  /**
   * 
   * @see RpcType
   */
  public RpcType getRpcType() {
    return this.rpcType;
  }

  /**
   * 
   * @see RpcType
   */
  public RpcCommand setRpcType(RpcType rpcType) {
    this.rpcType = rpcType;
    return this;
  }

  public void unsetRpcType() {
    this.rpcType = null;
  }

  /** Returns true if field rpcType is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcType() {
    return this.rpcType != null;
  }

  public void setRpcTypeIsSet(boolean value) {
    if (!value) {
      this.rpcType = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public RpcCommand setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getCredential() {
    return this.credential;
  }

  public RpcCommand setCredential(String credential) {
    this.credential = credential;
    return this;
  }

  public void unsetCredential() {
    this.credential = null;
  }

  /** Returns true if field credential is set (has been assigned a value) and false otherwise */
  public boolean isSetCredential() {
    return this.credential != null;
  }

  public void setCredentialIsSet(boolean value) {
    if (!value) {
      this.credential = null;
    }
  }

  public String getClientId() {
    return this.clientId;
  }

  public RpcCommand setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public String getClientAddress() {
    return this.clientAddress;
  }

  public RpcCommand setClientAddress(String clientAddress) {
    this.clientAddress = clientAddress;
    return this;
  }

  public void unsetClientAddress() {
    this.clientAddress = null;
  }

  /** Returns true if field clientAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetClientAddress() {
    return this.clientAddress != null;
  }

  public void setClientAddressIsSet(boolean value) {
    if (!value) {
      this.clientAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JSON_COMMAND:
      if (value == null) {
        unsetJsonCommand();
      } else {
        setJsonCommand((String)value);
      }
      break;

    case RPC_TYPE:
      if (value == null) {
        unsetRpcType();
      } else {
        setRpcType((RpcType)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case CREDENTIAL:
      if (value == null) {
        unsetCredential();
      } else {
        setCredential((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CLIENT_ADDRESS:
      if (value == null) {
        unsetClientAddress();
      } else {
        setClientAddress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JSON_COMMAND:
      return getJsonCommand();

    case RPC_TYPE:
      return getRpcType();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case CREDENTIAL:
      return getCredential();

    case CLIENT_ID:
      return getClientId();

    case CLIENT_ADDRESS:
      return getClientAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JSON_COMMAND:
      return isSetJsonCommand();
    case RPC_TYPE:
      return isSetRpcType();
    case TIMESTAMP:
      return isSetTimestamp();
    case CREDENTIAL:
      return isSetCredential();
    case CLIENT_ID:
      return isSetClientId();
    case CLIENT_ADDRESS:
      return isSetClientAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcCommand)
      return this.equals((RpcCommand)that);
    return false;
  }

  public boolean equals(RpcCommand that) {
    if (that == null)
      return false;

    boolean this_present_jsonCommand = true && this.isSetJsonCommand();
    boolean that_present_jsonCommand = true && that.isSetJsonCommand();
    if (this_present_jsonCommand || that_present_jsonCommand) {
      if (!(this_present_jsonCommand && that_present_jsonCommand))
        return false;
      if (!this.jsonCommand.equals(that.jsonCommand))
        return false;
    }

    boolean this_present_rpcType = true && this.isSetRpcType();
    boolean that_present_rpcType = true && that.isSetRpcType();
    if (this_present_rpcType || that_present_rpcType) {
      if (!(this_present_rpcType && that_present_rpcType))
        return false;
      if (!this.rpcType.equals(that.rpcType))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_credential = true && this.isSetCredential();
    boolean that_present_credential = true && that.isSetCredential();
    if (this_present_credential || that_present_credential) {
      if (!(this_present_credential && that_present_credential))
        return false;
      if (!this.credential.equals(that.credential))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_clientAddress = true && this.isSetClientAddress();
    boolean that_present_clientAddress = true && that.isSetClientAddress();
    if (this_present_clientAddress || that_present_clientAddress) {
      if (!(this_present_clientAddress && that_present_clientAddress))
        return false;
      if (!this.clientAddress.equals(that.clientAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RpcCommand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RpcCommand typedOther = (RpcCommand)other;

    lastComparison = Boolean.valueOf(isSetJsonCommand()).compareTo(typedOther.isSetJsonCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonCommand, typedOther.jsonCommand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRpcType()).compareTo(typedOther.isSetRpcType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcType, typedOther.rpcType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredential()).compareTo(typedOther.isSetCredential());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredential()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credential, typedOther.credential);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(typedOther.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, typedOther.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientAddress()).compareTo(typedOther.isSetClientAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientAddress, typedOther.clientAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RpcCommand(");
    boolean first = true;

    sb.append("jsonCommand:");
    if (this.jsonCommand == null) {
      sb.append("null");
    } else {
      sb.append(this.jsonCommand);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpcType:");
    if (this.rpcType == null) {
      sb.append("null");
    } else {
      sb.append(this.rpcType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (isSetCredential()) {
      if (!first) sb.append(", ");
      sb.append("credential:");
      if (this.credential == null) {
        sb.append("null");
      } else {
        sb.append(this.credential);
      }
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetClientAddress()) {
      if (!first) sb.append(", ");
      sb.append("clientAddress:");
      if (this.clientAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.clientAddress);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (jsonCommand == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jsonCommand' was not present! Struct: " + toString());
    }
    if (rpcType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rpcType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcCommandStandardSchemeFactory implements SchemeFactory {
    public RpcCommandStandardScheme getScheme() {
      return new RpcCommandStandardScheme();
    }
  }

  private static class RpcCommandStandardScheme extends StandardScheme<RpcCommand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JSON_COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonCommand = iprot.readString();
              struct.setJsonCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RPC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rpcType = RpcType.findByValue(iprot.readI32());
              struct.setRpcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREDENTIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.credential = iprot.readString();
              struct.setCredentialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientAddress = iprot.readString();
              struct.setClientAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcCommand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jsonCommand != null) {
        oprot.writeFieldBegin(JSON_COMMAND_FIELD_DESC);
        oprot.writeString(struct.jsonCommand);
        oprot.writeFieldEnd();
      }
      if (struct.rpcType != null) {
        oprot.writeFieldBegin(RPC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.rpcType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.credential != null) {
        if (struct.isSetCredential()) {
          oprot.writeFieldBegin(CREDENTIAL_FIELD_DESC);
          oprot.writeString(struct.credential);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientAddress != null) {
        if (struct.isSetClientAddress()) {
          oprot.writeFieldBegin(CLIENT_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.clientAddress);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcCommandTupleSchemeFactory implements SchemeFactory {
    public RpcCommandTupleScheme getScheme() {
      return new RpcCommandTupleScheme();
    }
  }

  private static class RpcCommandTupleScheme extends TupleScheme<RpcCommand> {

   
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.jsonCommand);
      oprot.writeI32(struct.rpcType.getValue());
      oprot.writeI64(struct.timestamp);
      BitSet optionals = new BitSet();
      if (struct.isSetCredential()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetClientAddress()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCredential()) {
        oprot.writeString(struct.credential);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetClientAddress()) {
        oprot.writeString(struct.clientAddress);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.jsonCommand = iprot.readString();
      struct.setJsonCommandIsSet(true);
      struct.rpcType = RpcType.findByValue(iprot.readI32());
      struct.setRpcTypeIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.credential = iprot.readString();
        struct.setCredentialIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientAddress = iprot.readString();
        struct.setClientAddressIsSet(true);
      }
    }
  }

}

